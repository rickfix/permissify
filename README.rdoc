= Permissify

Based on/inspired by CanCan {<img src="https://secure.travis-ci.org/ryanb/cancan.png" />}[http://travis-ci.org/ryanb/cancan]

Wiki[https://github.com/rickfix/permissify/wiki] | RDocs[http://rdoc.info/projects/rickfix/permissify] 

Permissify is an authorization library for Ruby on Rails which restricts what resources a given model (i.e. user) is, or combination of models (user and merchant) are, allowed to access. 

Abilities are defined in a single location (the +Ability+ class).

If you wish to permissify users with a set of roles... your roles class is permissified and you specify (through seeds, administration or some other mechanism) permissions to each ability.

Permissify expects a user to have many and belong to roles.
The following interfaces must be supported...


In the system which this gem was extracted, users where assigned many roles and businesses where are assigned many products (or, more accurately, product bundles).  In views, access to ability-restricted navigation was typically affected by checking, (example is for merchant user admin) 'allowed_to?(:view, :merchant_user_admin)'.  Under the hood, at least one of the user's roles must have permission to view merchant user admin AND at least one of the merchant's products must also have permission to view merchant user admin.  Remember those Venn diagrams from 4th grade? Permissify is performing unions and intersections for you.  It also allows you to specify if a particular abiltiy is only governed by a single model (role or product or ...).


== Installation

In <b>Rails 3</b>, add this to your Gemfile and run the +bundle+ command.

  gem "permissify"

In <b>Rails 2</b>, add this to your environment.rb file.

  config.gem "permissify"


== Getting Started

Permissify expects a +current_user+ method to exist in the controller. First, set up some authentication (such as Authlogic[https://github.com/binarylogic/authlogic] or Devise[https://github.com/plataformatec/devise]). See {Changing Defaults}[https://github.com/rickfix/permissify/wiki/changing-defaults] if you need different behavior.


=== 1. Define Abilities

User permissions are defined in an +Ability+ class. Permissify x.y includes a Rails 3 generator for creating this class.

  rails g permissify:ability

In Rails 2.3, just add a new class in `app/models/ability.rb` with the folowing contents:

  class Ability
    include Permissify::Ability

    def initialize(user)
    end
  end

See {Defining Abilities}[https://github.com/rickfix/permissify/wiki/defining-abilities] for details.


=== 2. Check Abilities & Authorization

The current user's permissions can then be checked using the <tt>can?</tt> and <tt>cannot?</tt> methods in the view and controller.

  <% if can? :update, @article %>
    <%= link_to "Edit", edit_article_path(@article) %>
  <% end %>

See {Checking Abilities}[https://github.com/rickfix/permissify/wiki/checking-abilities] for more information

The <tt>authorize!</tt> method in the controller will raise an exception if the user is not able to perform the given action.

  def show
    @article = Article.find(params[:id])
    authorize! :read, @article
  end

Setting this for every action can be tedious, therefore the +load_and_authorize_resource+ method is provided to automatically authorize all actions in a RESTful style resource controller. It will use a before filter to load the resource into an instance variable and authorize it for every action.

  class ArticlesController < ApplicationController
    load_and_authorize_resource

    def show
      # @article is already loaded and authorized
    end
  end

See {Authorizing Controller Actions}[https://github.com/rickfix/permissify/wiki/authorizing-controller-actions] for more information.


=== 3. Handle Unauthorized Access

If the user authorization fails, a <tt>Permissify::AccessDenied</tt> exception will be raised. You can catch this and modify its behavior in the +ApplicationController+.

  class ApplicationController < ActionController::Base
    rescue_from Permissify::AccessDenied do |exception|
      redirect_to root_url, :alert => exception.message
    end
  end

See {Exception Handling}[https://github.com/rickfix/permissify/wiki/exception-handling] for more information.


=== 4. Lock It Down

If you want to ensure authorization happens on every action in your application, add +check_authorization+ to your ApplicationController.

  class ApplicationController < ActionController::Base
    check_authorization
  end

This will raise an exception if authorization is not performed in an action. If you want to skip this add +skip_authorization_check+ to a controller subclass. See {Ensure Authorization}[https://github.com/rickfix/permissify/wiki/Ensure-Authorization] for more information.


== Wiki Docs

* {Upgrading to 1.6}[https://github.com/rickfix/permissify/wiki/Upgrading-to-1.6]
* {Defining Abilities}[https://github.com/rickfix/permissify/wiki/Defining-Abilities]
* {Checking Abilities}[https://github.com/rickfix/permissify/wiki/Checking-Abilities]
* {Authorizing Controller Actions}[https://github.com/rickfix/permissify/wiki/Authorizing-Controller-Actions]
* {Exception Handling}[https://github.com/rickfix/permissify/wiki/Exception-Handling]
* {Changing Defaults}[https://github.com/rickfix/permissify/wiki/Changing-Defaults]
* {See more}[https://github.com/rickfix/permissify/wiki]


== Project Status

Unfortunately I have not had time to actively work on this project recently. If you find a critical issue where it does not work as documented please {ping me on twitter}[http://twitter.com/rbates] and I'll take a look.


== Questions or Problems?

If you have any issues with Permissify which you cannot find the solution to in the documentation[https://github.com/rickfix/permissify/wiki], please add an {issue on GitHub}[https://github.com/rickfix/permissify/issues] or fork the project and send a pull request.

To get the specs running you should call +bundle+ and then +rake+. See the {spec/README}[https://github.com/rickfix/permissify/blob/master/spec/README.rdoc] for more information.


== Special Thanks

Permissify was inspired by declarative_authorization[https://github.com/stffn/declarative_authorization/] and aegis[https://github.com/makandra/aegis]. Also many thanks to the Permissify contributors[https://github.com/rickfix/permissify/contributors]. See the CHANGELOG[https://github.com/rickfix/permissify/blob/master/CHANGELOG.rdoc] for the full list.

